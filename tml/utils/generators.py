"""
                            - Generators -

PROGRAMMED BY: Jean Flaherty
DATE: 07/14/2017
DESCRIPTION:
    Utility functions for generators.
"""
from .ansi import ANSI


def print_generator(label, gen, period=1, end="\n"):
    """
    A generator that prints the value generated by a given generator
    as they are generated.

    ARGUMENTS:
        label  - Text that goes before the printed value.
        gen    - The generator to print.
        period - (Optional) How often the generated value should be printed.
                 Useful when printing slows run time.
        end    - (Optional) Defaults to "\n" and is used for print(args**, end)
    """
    try:
        i = 0
        while True:
            try:
                value = next(gen)
            except StopIteration:
                return
            if i % period == 0:
                print(label + "{0: <40}".format(str(value).rstrip("\n"))[:40], end=end)
            yield value
            i += 1
    finally:
        print(ANSI.CLEAR_LINE, end="\r")

def print_progress_generator(label, gen, total, period=1):
    """
    A generator that prints the value generated by a given generator
    as they are generated.

    ARGUMENTS:
        label  - Text that goes before the printed value.
        gen    - The generator to print.
        period - (Optional) How often the generated value should be printed.
                 Useful when printing slows run time.
        end    - (Optional) Defaults to "\n" and is used for print(args**, end)
    """
    try:
        i = 0
        while True:
            if (i % period == 0 or i+1 == total) and total > 0:
                print(label + "{:.2f}%".format(100.0*float(i+1)/float(total)), end="\r")
            try:
                yield next(gen)
            except StopIteration:
                return
            i += 1
    finally:
        print()
